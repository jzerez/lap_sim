classdef Transmission < handle
    properties
        mass;               % kg
        gear_ratio;         % unitless (driver/driven)
        torque_vs_rpm;      % torque vs. rpm function [rpm; torque (Nm)]
        max_vel;            % maximum velocity that the tranmission can support (
    end
    
    methods
        function self = Transmission(mass, gear_ratio, torque_vs_rpm)
            self.mass = mass;
            self.gear_ratio = gear_ratio;
            self.torque_vs_rpm = torque_vs_rpm;
        end
        
        function res = motor_curve_228(self)
            % The motor curve for an emrax 228
            % Assumes continuous force
            rpms = [0, 1400, 4000, 5000];
            torques = [96, 120,120,108];
            res = [rpms; torques];
        end
        
        function res = motor_curve_208(self)
            % The motor curve for an emrax 208
            % Assumes continuous force
            rpms = [0, 1600, 3000, 6000];
            torques = [72.5, 80, 80, 65];
            curve = [rpms; torques];
        end
        
        function max_force = calc_max_force(self, vel, r)
                % calculate corresponding motor rpm given gear ratio
                motor_rpm = vel / r / (2 * pi) * 60 * self.gear_ratio;
                curve = self.torque_vs_rpm;
                if motor_rpm > max(curve(1, :))
                    motor_rpm = max(curve(1, :));
                end
                
                % interpolate max motor torque for given rpm
                motor_torque_lim = interp1(curve(1, :), curve(2, :), motor_rpm);
                % Divide by two because max force for each rear wheel is
                % half of total
                max_force = motor_torque_lim * self.gear_ratio / r / 2; 
        end
        
    end

end